(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{154:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return s}));var n=a(2),l=a(9),i=(a(0),a(160)),r={sidebar_label:"Creating Pull Request",title:"Creating Pull Request"},b={id:"guides/03-github-actions/02-creating-pull-request",title:"Creating Pull Request",description:"1. Pull Request SHALL target develop or master branch(for large scale projects use develop as the go-to branch for new features or other, non-hotfixable changes that should be scheduled for upcoming releases and master for medium sized libraries). You MAY also use other branches if you are fallowing specific release workflow.",source:"@site/docs/guides/03-github-actions/02-creating-pull-request.md",permalink:"/template-test/docs/guides/03-github-actions/02-creating-pull-request",sidebar_label:"Creating Pull Request",sidebar:"guides",previous:{title:"Actions",permalink:"/template-test/docs/guides/03-github-actions/01-actions"},next:{title:"Release Workflow",permalink:"/template-test/docs/guides/03-github-actions/03-release"}},o=[{value:"<code>update-pr.yml</code> Action",id:"update-pryml-action",children:[]},{value:"<code>pr.yml</code> Action",id:"pryml-action",children:[]}],c={rightToc:o};function s(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Pull Request SHALL target ",Object(i.b)("em",{parentName:"li"},"develop")," or ",Object(i.b)("em",{parentName:"li"},"master")," branch(for large scale projects use ",Object(i.b)("em",{parentName:"li"},"develop")," as the go-to branch for new features or other, non-",Object(i.b)("em",{parentName:"li"},"hotfixable")," changes that should be scheduled for upcoming releases and ",Object(i.b)("em",{parentName:"li"},"master")," for medium sized libraries). You MAY also use other branches if you are fallowing specific release workflow."),Object(i.b)("li",{parentName:"ol"},"Added title MUST describe the change that you want to implement and MUST exclude ",Object(i.b)("em",{parentName:"li"},"project key"),"(i.e. ",Object(i.b)("inlineCode",{parentName:"li"},"foo-123"),"), for example: ",Object(i.b)("inlineCode",{parentName:"li"},"Add subtract"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Document multiply"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Bump lodash to 4.17.15"),"."),Object(i.b)("li",{parentName:"ol"},"Adding Pull Request body MUST be initially omitted(its auto generated)."),Object(i.b)("li",{parentName:"ol"},"All ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/features/actions"}),"Github Actions")," MUST be successfully finished before any change is done to Pull Request. Sometimes it takes couple of seconds to start - don't be misled if this process is done immediately and successful."),Object(i.b)("li",{parentName:"ol"},"New Pull Request's title MUST be auto-generated - it prefixes user's tile with ",Object(i.b)("em",{parentName:"li"},"project key"),"(i.e. ",Object(i.b)("inlineCode",{parentName:"li"},"[FOO-123] User's title set during creation"),")."),Object(i.b)("li",{parentName:"ol"},"New Pull Request's body MUST be auto-generated with necessary template. For:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"fixes: ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/ISSUE_TEMPLATE/fix_template.md")),Object(i.b)("li",{parentName:"ul"},"default: ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/ISSUE_TEMPLATE/pull_request_template.md"))),Object(i.b)("ol",{start:7},Object(i.b)("li",{parentName:"ol"},"All automated actions that ensures Pull Request's mergeability MUST be finished successfully. You MUST ensure that labels are assigned to the Pull Request:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"builds")," - ensures that PR changes can be build"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"formatted")," - ensures that PR changes are correctly styled"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"linted")," - ensures that PR changes are linted"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"conventional")," - ensures that commits fallow ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.conventionalcommits.org/"}),"Conventional Commits"),"convention"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"tested")," - ensures that all tests are passing"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"covered")," - ensures that tests matches ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../02-best-practices/05-testing#code-coverage"}),"coverage thresholds")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"documented")," - ensures that documentation can be build(",Object(i.b)("inlineCode",{parentName:"li"},"npm run docs:build"),")")),Object(i.b)("ol",{start:8},Object(i.b)("li",{parentName:"ol"},"Adding additional reviewers is RECOMMENDED."),Object(i.b)("li",{parentName:"ol"},"Pull Request's body MUST be filled with additional information that depends on the type(",Object(i.b)("inlineCode",{parentName:"li"},"fix"),"/",Object(i.b)("inlineCode",{parentName:"li"},"default"),") - i.e. description(s) of the change."),Object(i.b)("li",{parentName:"ol"},"All required steps included in ",Object(i.b)("em",{parentName:"li"},"Review Checklist")," MUST be completed before merging Pull Request."),Object(i.b)("li",{parentName:"ol"},"Once all steps are completed - Pull Request MAY be merged.")),Object(i.b)("h2",{id:"update-pryml-action"},Object(i.b)("inlineCode",{parentName:"h2"},"update-pr.yml")," Action"),Object(i.b)("p",null,"When any ",Object(i.b)("inlineCode",{parentName:"p"},"opened")," ",Object(i.b)("strong",{parentName:"p"},"Pull Request")," type runs(",Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"update-pr.yml")),"):"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Apply labels to PRs based on branch name patterns from ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/pr-labeler.yml")),Object(i.b)("li",{parentName:"ol"},"Formats Pull Request for ",Object(i.b)("inlineCode",{parentName:"li"},"fix")," type:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If label ",Object(i.b)("inlineCode",{parentName:"li"},"fix")," is assigned:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Reads Pull Request body template from ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/ISSUE_TEMPLATE/fix_template.md")),Object(i.b)("li",{parentName:"ul"},"Updates Pull Request information by ",Object(i.b)("inlineCode",{parentName:"li"},"tzkhan/pr-update-action"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Prefixes PR title with ",Object(i.b)("em",{parentName:"li"},"project key")," i.e. ","[FOO]"),Object(i.b)("li",{parentName:"ul"},"Adds PR body based on ",Object(i.b)("inlineCode",{parentName:"li"},"fix")," template"))))),Object(i.b)("li",{parentName:"ul"},"Else:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Reads Pull Request body template from ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/ISSUE_TEMPLATE/pull_request_template.md")),Object(i.b)("li",{parentName:"ul"},"Updates Pull Request information by ",Object(i.b)("inlineCode",{parentName:"li"},"tzkhan/pr-update-action"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Prefixes PR title with ",Object(i.b)("em",{parentName:"li"},"project key")," i.e. ","[FOO]"),Object(i.b)("li",{parentName:"ul"},"Adds PR body based on ",Object(i.b)("inlineCode",{parentName:"li"},"pull_request")," template")))))),Object(i.b)("h2",{id:"pryml-action"},Object(i.b)("inlineCode",{parentName:"h2"},"pr.yml")," Action"),Object(i.b)("p",null,"When any ",Object(i.b)("inlineCode",{parentName:"p"},"opened"),", ",Object(i.b)("inlineCode",{parentName:"p"},"reopened"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"synchronize")," ",Object(i.b)("strong",{parentName:"p"},"Pull Request")," type runs(",Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"pr.yml")),"):"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Assign it to ",Object(i.b)("inlineCode",{parentName:"li"},"reviewers")," based on ",Object(i.b)("inlineCode",{parentName:"li"},"./.github/auto_assign.yml")," (",Object(i.b)("strong",{parentName:"li"},"add_reviewers"),")"),Object(i.b)("li",{parentName:"ol"},"Check code for misspells (",Object(i.b)("strong",{parentName:"li"},"misspell"),")"),Object(i.b)("li",{parentName:"ol"},"Lint for ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.conventionalcommits.org/"}),"conventional commits")," (",Object(i.b)("strong",{parentName:"li"},"lint_commits"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"conventional")," if passing")),Object(i.b)("ol",{start:4},Object(i.b)("li",{parentName:"ol"},"Run tests with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn test")," on multiple node versions(if defined)(",Object(i.b)("strong",{parentName:"li"},"test_unit"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"tested")," if passing")),Object(i.b)("ol",{start:5},Object(i.b)("li",{parentName:"ol"},"Test code with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn test:coverage")," && ",Object(i.b)("inlineCode",{parentName:"li"},"yarn coverage:ci")," (",Object(i.b)("strong",{parentName:"li"},"validate_test_coverage"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"covered")," if passing")),Object(i.b)("ol",{start:6},Object(i.b)("li",{parentName:"ol"},"Test code with eslint reviewdog and report back(",Object(i.b)("strong",{parentName:"li"},"test_lint"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"linted")," if passing and on inner workspace")),Object(i.b)("ol",{start:7},Object(i.b)("li",{parentName:"ol"},"Check format of code with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn test:format"),"(",Object(i.b)("strong",{parentName:"li"},"format"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},"yarn test:format")," is successful:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"formatted")))),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},"yarn test:format")," fails:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Run ",Object(i.b)("inlineCode",{parentName:"li"},"yarn format")),Object(i.b)("li",{parentName:"ul"},"Clean build files with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn clean")),Object(i.b)("li",{parentName:"ul"},"Commit the format changes as ",Object(i.b)("inlineCode",{parentName:"li"},"github-actions[bot]")," to ",Object(i.b)("strong",{parentName:"li"},"Pull Request")," head"),Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"formatted"))))),Object(i.b)("ol",{start:8},Object(i.b)("li",{parentName:"ol"},"Assign authors to ",Object(i.b)("inlineCode",{parentName:"li"},"AUTHORS")," file if necessary and commits changes as ",Object(i.b)("inlineCode",{parentName:"li"},"github-actions[bot]")),Object(i.b)("li",{parentName:"ol"},"Build code with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn build"),"(",Object(i.b)("strong",{parentName:"li"},"build"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"builds")," if passing")),Object(i.b)("ol",{start:9},Object(i.b)("li",{parentName:"ol"},"Build documentation with ",Object(i.b)("inlineCode",{parentName:"li"},"yarn docs:build"),"(",Object(i.b)("strong",{parentName:"li"},"build"),")")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Label with ",Object(i.b)("em",{parentName:"li"},"documented")," if passing")))}s.isMDXComponent=!0},160:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),l=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=l.a.createContext({}),s=function(e){var t=l.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},p=function(e){var t=s(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},u=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(a),u=n,d=p["".concat(r,".").concat(u)]||p[u]||m[u]||i;return a?l.a.createElement(d,b(b({ref:t},c),{},{components:a})):l.a.createElement(d,b({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=u;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:n,r[1]=b;for(var c=2;c<i;c++)r[c]=a[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);