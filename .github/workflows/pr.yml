name: Pull Request

env:
  isFork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}

on: [pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node@13.x
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
  add_reviewers:
    runs-on: ubuntu-latest
    name: Assign reviewers
    steps:
      - uses: kentaro-m/auto-assign-action@v1.1.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  misspell:
    runs-on: ubuntu-latest
    name: Fix misspells
    steps:
      - uses: actions/checkout@v2
      - name: misspell
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: 'US'
  lint_commits:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v1
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'conventional') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'conventional'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['conventional']
            })
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x, 14.x]
    name: Node@${{ matrix.node-version}} / Run tests
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['tested']
            })
  validate_test_coverage:
    runs-on: ubuntu-latest
    name: Validate test coverage
    needs: ['setup']
    steps:
      - run: yarn test:coverage
      - run: yarn coverage:ci # Generate coverage.lcov report
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.lcov
          fail_ci_if_error: true
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'covered') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'covered'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['covered']
            })
  test_lint:
    name: Test lint(with reviewdog)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint and report push
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          eslint_flags: 'src/**/*.ts'
      - uses: actions/github-script@0.6.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['linted']
            })
      - uses: actions/github-script@0.6.0
        if: failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'linted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'linted'
              })
            }
  test_format_or_format_and_push:
    name: Format and push code back
    runs-on: ubuntu-latest
    needs: [test_lint]
    if: always()
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2 # checkout for forks
        if: contains(env.isFork, 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2 # checkout for PR
        if: contains(env.isFork, 'false')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Setup Node@13.x
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test:format
      - name: Format and commit changes if check failed
        if: failure() && github.actor != 'github-actions' && contains(env.isFork, 'false')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn format
          sudo yarn clean
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff-index --quiet HEAD || git commit --allow-empty -m "style: add format changes ðŸ¤–" -a
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:refs/heads/${{ github.head_ref }} && exit 0
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'formatted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'formatted'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['formatted']
            })
  build:
    runs-on: ubuntu-latest
    name: Node@13.x / Build
    needs: ['setup']
    steps:
      - run: yarn build
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'builds') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'builds'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['builds']
            })
  automerge:
    name: Automerge Pull Request
    runs-on: ubuntu-latest
    needs:
      [
        lint_commits,
        test,
        validate_test_coverage,
        test_lint,
        test_format_or_format_and_push,
        build,
      ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_NUMBER: ${{ format('{0}{1}', github.event.pull_request.number, github.event.issue.number) }}
    # IF event type is non fork PR or comment on PR from qejk with '/release'
    if: >-
      (
        github.event_name == 'pull_request'
        && github.event.pull_request.head.repo.full_name == github.repository
        && contains(github.event.pull_request.labels.*.name, 'formatted')
        && contains(github.event.pull_request.labels.*.name, 'linted')
        && contains(github.event.pull_request.labels.*.name, 'conventional')
        && contains(github.event.pull_request.labels.*.name, 'builds')
        && contains(github.event.pull_request.labels.*.name, 'tested')
        && contains(github.event.pull_request.labels.*.name, 'covered')
        && ! contains(github.event.pull_request.labels.*.name, 'automated merge')
        && ! contains(github.event.pull_request.labels.*.name, 'hold merge')
      ) || (
        github.event_name == 'issue_comment'
        && github.event.issue.pull_request != ''
        && contains(github.event.comment.body, '/release')
        && github.actor == 'qejk'
        && contains(github.event.pull_request.labels.*.name, 'formatted')
        && contains(github.event.pull_request.labels.*.name, 'linted')
        && contains(github.event.pull_request.labels.*.name, 'conventional')
        && contains(github.event.pull_request.labels.*.name, 'builds')
        && contains(github.event.pull_request.labels.*.name, 'tested')
        && contains(github.event.pull_request.labels.*.name, 'covered')
        && ! contains(github.event.issue.labels.*.name, 'automated merge')
        && ! contains(github.event.issue.labels.*.name, 'hold merge'))
    steps:
      # IF formatted, builds, and tested labels then merge
      - name: if formatted, builds, tested merge automerge pr
        uses: pascalgn/automerge-action@v0.7.5
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          MERGE_METHOD: merge
          # This breaks the /release on issue_comment portion unless I get the head.ref from github-script
          MERGE_COMMIT_MESSAGE: 'Auto merge from ${{ github.event.pull_request.head.ref }} PR#{pullRequest.number}: {pullRequest.title}'
          UPDATE_METHOD: merge
          MERGE_LABELS: 'formatted,builds,tested,linted,covered,conventional'
          UPDATE_LABELS: ''
        # IF failure, get payload of PR and notify
      - name: if failure, get pr payload
        uses: actions/github-script@0.8.0
        id: pr_json
        if: failure()
        with:
          github-token: ${{env.GITHUB_TOKEN}}
          script: |
            const result = await github.pulls.get({
              owner: '${{ github.repository }}'.split('/')[0],
              repo: '${{ github.repository }}'.split('/')[1],
              pull_number: ${{ env.PR_NUMBER }}
            })
            return result.data;
      - name: if failure, set pr payload outputs
        if: failure()
        id: pr
        run: |
          echo '${{ steps.pr_json.outputs.result }}' > pr.json
          echo "::set-output name=user::$( jq -r '.user.login' pr.json )"
          echo "::set-output name=head::$( jq -r '.head.repo.full_name' pr.json )"
          echo "::set-output name=head_url::$( jq -r '.head.repo.html_url' pr.json )"
          echo "::set-output name=base::$( jq -r '.base.repo.full_name' pr.json )"
          echo "::set-output name=base_url::$( jq -r '.base.repo.html_url' pr.json )"
      - name: IF failure, notify
        uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          token: ${{ env.GITHUB_TOKEN }}
          issue-number: ${{ env.PR_NUMBER }}
          body: |
            @${{ steps.pr.outputs.user }}, ${{ env.AUTHOR }} - it appears that there was an issue with the merge.

            Head Repo/Branch: **[${{ steps.pr.outputs.head }}]**(${{ steps.pr.outputs.head_url }}) merge into **[${{ steps.pr.outputs.base }}]**(${{ steps.pr.outputs.base_url }})

            ## Event JSON
            ```json
              ${{ toJSON(steps.pr_json.outputs.result)}}
            ```
      - name: IF failure, assign failure label
        uses: actions/github-script@0.6.0
        if: failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'failed') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'failed'
              })
            }
      - uses: actions/github-script@0.6.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['automated merge']
            })
