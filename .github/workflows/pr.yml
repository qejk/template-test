name: Pull Request

env:
  isFork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}

on: [pull_request]

jobs:
  add_reviewers:
    runs-on: ubuntu-latest
    name: Assign reviewers
    steps:
      - uses: kentaro-m/auto-assign-action@v1.1.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  misspell:
    runs-on: ubuntu-latest
    name: Fix misspells
    steps:
      - name: Check out code.
        uses: actions/checkout@v1
      - name: misspell
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: 'US'
  lint_commits:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v1
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'conventional') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'conventional'
              })
            }
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested:integration') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested:integration'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['conventional']
            })
  test_unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x, 14.x]
    name: Node@${{ matrix.node-version}} / Unit test
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test:unit
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested:unit') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested:unit'
              })
            }
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested:integration') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested:integration'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['tested:unit']
            })
  test_integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x, 14.x]
    name: Node@${{ matrix.node-version }} / Integration test
    steps:
      - uses: actions/checkout@v2
      - name: Check for existence of integration tests
        id: has_integration_tests
        uses: andstor/file-existence-action@v1
        with:
          allow_failure: false
          files: './test/integration'
      - name: Setup Node
        if: steps.has_integration_tests.outputs.files_exists == 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        if: steps.has_integration_tests.outputs.files_exists == 'true'
        uses: jaid/action-npm-install@v1.2.1
      - name: Run integration tests
        if: steps.has_integration_tests.outputs.files_exists == 'true'
        run: yarn test:integration
      - uses: actions/github-script@0.6.0
        if: steps.has_integration_tests.outputs.files_exists == 'true' && failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested:integration') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested:integration'
              })
            }
      - uses: actions/github-script@0.6.0
        if: steps.has_integration_tests.outputs.files_exists == 'true' && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['tested:integration']
            })
  validate_test_coverage:
    runs-on: ubuntu-latest
    name: Validate test coverage
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node@13.x
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test:coverage
      - run: yarn coverage:ci # Generate coverage.lcov report
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.lcov
          fail_ci_if_error: true
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'covered') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'covered'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['covered']
            })
  test_lint:
    name: Test lint(with reviewdog)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint and report push
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          eslint_flags: 'src/**/*.ts'
      - uses: actions/github-script@0.6.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['linted']
            })
      - uses: actions/github-script@0.6.0
        if: failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'linted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'linted'
              })
            }
  test_format_or_format_and_push:
    name: Format and push code back
    runs-on: ubuntu-latest
    needs: [test_lint]
    if: always()
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2 # checkout for forks
        if: contains(env.isFork, 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2 # checkout for PR
        if: contains(env.isFork, 'false')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Setup Node@13.x
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test:format
      - name: Format and commit changes if check failed
        if: failure() && github.actor != 'github-actions' && contains(env.isFork, 'false')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn format
          sudo yarn clean
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff-index --quiet HEAD || git commit --allow-empty -m "style: add format changes ðŸ¤–" -a
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:refs/heads/${{ github.head_ref }} && exit 0
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'formatted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'formatted'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['formatted']
            })
  build:
    runs-on: ubuntu-latest
    name: Node@13.x / Build
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node@13.x
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn build
      - uses: actions/github-script@0.6.0
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'builds') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'builds'
              })
            }
      - uses: actions/github-script@0.6.0
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['builds']
            })
